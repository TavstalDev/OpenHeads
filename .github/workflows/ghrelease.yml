# Purpose: This GitHub Actions workflow builds the Paper plugin and creates a pre-release on the stable branch.
# Uploads the built JAR file(s) to github, and generates a changelog based on the latest Git tag.
name: Build and Pre-release Paper Plugin

on:
  push:
    branches:
      - stable

permissions:
  contents: write

env:
  CONFIG_PATH: src/main/resources/plugin.yml
  COMMIT_EXTRA_DESC: ""

jobs:
  build:
    name: Build Plugin
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Grant Gradle wrapper permission
        run: chmod +x ./gradlew

      - name: Build plugin
        run: ./gradlew build

      - name: Extract plugin version from plugin.yml
        id: extract_version
        run: |
          echo "--- Starting advanced debug for PLUGIN_VERSION ---"
          
          # 1. Show the raw output of your extraction pipeline using 'od -c'
          #    This will reveal ALL characters, including hidden ones, in octal and character form.
          echo "Raw output from grep/cut/tr/xargs pipeline (od -c):"
          grep "^version:" src/main/resources/plugin.yml | cut -d ' ' -f2 | tr -d '[:cntrl:]' | xargs | od -c
          echo "--------------------------------------------------"

          # 2. Assign to 'version' and immediately inspect it with 'printf %q'
          #    'printf %q' shows the string in a shell-quoted format, revealing non-printable chars.
          version=$(grep "^version:" src/main/resources/plugin.yml | cut -d ' ' -f2 | tr -d '[:cntrl:]' | xargs)
          echo "Value of shell variable 'version' (printf %q):"
          printf '%q\n' "$version"
          echo "--------------------------------------------------"

          # 3. Print the line exactly as it will be written to $GITHUB_ENV, and inspect with 'od -c'
          #    This is the most critical check.
          echo "Line being written to GITHUB_ENV (od -c):"
          echo "PLUGIN_VERSION=$version" | od -c
          echo "--------------------------------------------------"

          # 4. Perform the actual write to GITHUB_ENV
          echo "PLUGIN_VERSION=$version" >> $GITHUB_ENV
          
          # 5. Immediately verify that the environment variable was set in THIS step's scope.
          echo "Verification: PLUGIN_VERSION from env after setting: '${{ env.PLUGIN_VERSION }}'"
          echo "--- Finished advanced debug for PLUGIN_VERSION ---"

      - name: Get latest Git tag
        id: get_latest_tag
        run: |
          git fetch --tags
          latest=$(git tag --sort=-v:refname | head -n 1 || echo "none")
          echo "LATEST_TAG=$latest" >> $GITHUB_ENV

      - name: Generate changelog since latest tag
        id: generate_changelog
        run: |
          git fetch --unshallow || true
          if [ "$LATEST_TAG" = "none" ] || [ -z "$LATEST_TAG" ]; then
            log=$(git log --pretty=format:"- [%h](https://github.com/${{ github.repository }}/commit/%h) - %s")
          else
            log=$(git log "$LATEST_TAG"..HEAD --pretty=format:"- [%h](https://github.com/${{ github.repository }}/commit/%h) - %s")
          fi
          echo "COMMITS<<EOF" >> $GITHUB_ENV
          echo "$log" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Upload JAR artifact
        uses: actions/upload-artifact@v4
        with:
          name: plugin-jar
          path: build/libs/*.jar

  release:
    name: Create GitHub Pre-release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download built JAR
        uses: actions/download-artifact@v4
        with:
          name: plugin-jar

      - name: Create GitHub Pre-release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.PLUGIN_VERSION }}
          name: "Build v${{ env.PLUGIN_VERSION }}"
          prerelease: true
          body: |
            ## Changelog
            ${{ env.COMMIT_EXTRA_DESC }}
            Changes pushed to branch `${{ github.ref_name }}`
            ${{ env.COMMITS}}
          files: |
            *.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}